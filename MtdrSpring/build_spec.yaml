version: 0.1 
component: build
timeoutInSeconds: 1800
shell: bash

env:
  variables:
    JAVA_HOME: /usr/lib64/graalvm/graalvm22-ee-java17
    # 👇 OCID del secreto en OCI Vault (no es el secreto en sí, solo su identificador)
    OCIR_TOKEN_SECRET_OCID: "ocid1.vaultsecret.oc1.mx-queretaro-1.xxxxxxx"

  exportedVariables:
    - BuildServiceDemoVersion

steps:
  # -------------------------------
  # 🧩 Instalar dependencias del sistema
  # -------------------------------
  - type: Command
    name: "Enable CRB repo and install native-image deps"
    timeoutInSeconds: 900
    command: |
      set -euo pipefail
      echo "🔧 Enabling required repos and installing system deps..."
      yum -y install dnf-plugins-core || true
      yum config-manager --set-enabled ol8_codeready_builder
      yum config-manager --set-enabled ol8_addons || true
      yum -y install gcc gcc-c++ glibc-devel zlib-devel glibc-static libstdc++-static zlib-static
      echo "✅ Dependencies installed."

  # -------------------------------
  # ☕ Instalar GraalVM Enterprise
  # -------------------------------
  - type: Command
    name: "Install GraalVM Enterprise 22.x Native Image for Java17"
    timeoutInSeconds: 900
    command: |
      set -euo pipefail
      echo "📦 Installing GraalVM Enterprise 22 for Java 17..."
      yum -y install graalvm22-ee-17-native-image
      echo "✅ GraalVM installation complete."

  # -------------------------------
  # ⚙️ Configurar PATH de Java
  # -------------------------------
  - type: Command
    name: "Set PATH Variable"
    command: |
      set -e
      export PATH=$JAVA_HOME/bin:$PATH
      echo "PATH set to: $PATH"

  # -------------------------------
  # 🔐 Docker Login leyendo el secreto del Vault en tiempo de build
  # -------------------------------
  - type: Command
    name: "Docker Login (read Vault secret at build time)"
    timeoutInSeconds: 600
    command: |
      set -euo pipefail

      if [ -z "${OCIR_TOKEN_SECRET_OCID:-}" ]; then
        echo "❌ OCIR_TOKEN_SECRET_OCID no está definido en env.variables del build_spec."
        exit 1
      fi

      echo "🔎 Fetching OCIR auth token from OCI Vault (secret-bundle)..."
      TOKEN_B64=$(oci secrets secret-bundle get \
        --secret-id "${OCIR_TOKEN_SECRET_OCID}" \
        --stage CURRENT \
        --query 'data."secret-bundle-content".content' \
        --raw-output)

      if [ -z "${TOKEN_B64:-}" ]; then
        echo "❌ No se obtuvo contenido del secreto (revisa policies/Vault/OCID)."
        exit 1
      fi

      # El contenido viene base64 – decodificarlo:
      TOKEN=$(printf '%s' "${TOKEN_B64}" | base64 -d || true)
      if [ -z "${TOKEN:-}" ]; then
        echo "❌ No se pudo decodificar el contenido del secreto."
        exit 1
      fi

      echo "🔐 Logging in to OCIR..."
      printf '%s' "${TOKEN}" | docker login -u "axyqsveqbf4z/a00835868@tec.mx" --password-stdin qro.ocir.io
      echo "✅ Docker login successful."

  # -------------------------------
  # 🏗️ Build del backend
  # -------------------------------
  - type: Command
    name: "Build Spring Boot backend"
    timeoutInSeconds: 1200
    command: |
      set -euo pipefail
      cd MtdrSpring
      echo "🚀 Starting build process..."
      cd backend
      chmod +x build.sh || true
      source build.sh
      echo "✅ Backend build completed successfully."

# -------------------------------
# 📦 Output Artifacts
# -------------------------------
outputArtifacts:
  - name: backend-jar
    type: BINARY
    location: MtdrSpring/backend/target
