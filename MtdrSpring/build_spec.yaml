version: 0.1 
component: build
timeoutInSeconds: 1800
shell: bash

env:
  variables:
    JAVA_HOME: /usr/lib64/graalvm/graalvm22-ee-java17
  exportedVariables:
    - BuildServiceDemoVersion

steps:
  # -------------------------------
  # 🧩 Instalar dependencias del sistema
  # -------------------------------
  - type: Command
    name: "Enable CRB repo and install native-image deps"
    timeoutInSeconds: 900
    command: |
      set -euo pipefail
      echo "🔧 Enabling required repos and installing system deps..."
      yum -y install dnf-plugins-core || true
      yum config-manager --set-enabled ol8_codeready_builder
      yum config-manager --set-enabled ol8_addons || true
      yum -y install gcc gcc-c++ glibc-devel zlib-devel glibc-static libstdc++-static zlib-static
      echo "✅ Dependencies installed."

  # -------------------------------
  # ☕ Instalar GraalVM Enterprise
  # -------------------------------
  - type: Command
    name: "Install GraalVM Enterprise 22.x Native Image for Java17"
    timeoutInSeconds: 900
    command: |
      set -euo pipefail
      echo "📦 Installing GraalVM Enterprise 22 for Java 17..."
      yum -y install graalvm22-ee-17-native-image
      echo "✅ GraalVM installation complete."

  # -------------------------------
  # ⚙️ Configurar PATH de Java
  # -------------------------------
  - type: Command
    name: "Set PATH Variable"
    command: |
      set -e
      export PATH=$JAVA_HOME/bin:$PATH
      echo "PATH set to: $PATH"

  # -------------------------------
  # 🔐 Login a OCIR usando Secret del Vault
  # -------------------------------
  - type: Command
    name: "Docker Login (Vault Secret)"
    timeoutInSeconds: 600
    command: |
      set -euo pipefail
      echo "🔐 Logging in to OCIR with Vault secret..."
      # OCIR_AUTH_TOKEN viene del Vault (configurado en Environment Variables del stage)
      echo "${OCIR_AUTH_TOKEN}" | docker login -u "axyqsveqbf4z/a00835868@tec.mx" --password-stdin qro.ocir.io
      echo "✅ Docker login successful."

  # -------------------------------
  # 🏗️ Build del backend
  # -------------------------------
  - type: Command
    name: "Build Spring Boot backend"
    timeoutInSeconds: 1200
    command: |
      set -euo pipefail
      cd MtdrSpring
      echo "🚀 Starting build process..."
      cd backend
      chmod +x build.sh || true
      source build.sh
      echo "✅ Backend build completed successfully."

artifacts:
  - name: "backend-jar"
    type: BINARY
    location: "MtdrSpring/backend/target"
